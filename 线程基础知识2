第四章：线程的组合
4.1、设计线程安全的类：
  a)、三个基本要素：
  找出构成对象状态的所有变量；找出约束状态变量的不变性条件；建立对象状态的并发访问管理策略（定义了如何在不违背对象不变条件或后验条件的情况下对其状态
  的访问操作进行协同）。
  4.1.1、收集同步需求：了解对象的不变性条件和后验条件。
  4.1.2、依赖状态的操作：如果在某个操作中包含有基于状态的先验条件，那么这个操作就是依赖状态的操作。
  4.1.3、状态的所有权：
4.2、实例封闭：
  a)、将数据封装在对象内部，可以将数据的访问限制在对象的方法上，从而更容易的确保线程在访问数据时总能持有正确的锁。
  封闭机制更易于构造线程安全的类，因为当封闭类的状态时，在分析类的线程安全性时就无需检查整个程序。
  4.2.1、Java监视器模式
  public class PrivateLock {
    private final Object myLock = new Object();
    Widget widget;
    void someMethod() {
      synchronized(myLock) {
      
      }
    }
  }
  使用私有的锁对象而不是内置锁。
4.3、线程安全性的委托
4.3.4、发布底层的状态变量
如果一个状态变量时线程安全的，并且没有任何不变性条件来约束它的值，在变量的操作上也不存在任何不允许的状态转换，那么就可以安全地发布这个变量。
